<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MFDocumentManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MFDocumentManager</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/createImageForThumbnailOfPageNumber:ofSize:andScale:</TokenIdentifier>
			<Abstract type="html"> Create a thumbnail for a specific page. It will look far better than the thumbnail integrated inside the pdf, but
it is also slower. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/createImageForThumbnailOfPageNumber:ofSize:andScale:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/documentManagerWithFilePath:</TokenIdentifier>
			<Abstract type="html"> Factory method to create an   <a href="MFDocumentManager.html">MFDocumentManager</a>  instance from a know file path. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/documentManagerWithFilePath:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/outline</TokenIdentifier>
			<Abstract type="html"> Return an array of MFOutlineEntry as the outline/TOC of the pdf document. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/outline</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/initWithFileUrl:</TokenIdentifier>
			<Abstract type="html"> Initializer. You can also use the factory method above. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/initWithFileUrl:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/isLocked</TokenIdentifier>
			<Abstract type="html"> Check if a document is encrypted and blocked by a password or not. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/isLocked</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/tryUnlockWithPassword:</TokenIdentifier>
			<Abstract type="html"> Try to unlock the document with a password and return if the unlock has been successful or not. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/tryUnlockWithPassword:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/numberOfPages</TokenIdentifier>
			<Abstract type="html"> Return the number of pages that make up the document. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/numberOfPages</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/emptyCache</TokenIdentifier>
			<Abstract type="html"> Clear the page cache. It is important to call this method on memory warning as in the sample code
to prevent the application being killed right for excessive memory usage. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/emptyCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/searchResultOnPage:forSearchTerms:</TokenIdentifier>
			<Abstract type="html"> Return an array of   <a href="MFTextItem.html">MFTextItem</a>  representing the matches of teh search term on the page passed
as arguments. It is a good choice running this method in a secondary thread. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/searchResultOnPage:forSearchTerms:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MFDocumentManager/wholeTextForPage:</TokenIdentifier>
			<Abstract type="html"> Return a string representation of the text contained in a pdf page. </Abstract>
			<DeclaredIn>MFDocumentManager.h</DeclaredIn>
			
			<Anchor>//api/name/wholeTextForPage:</Anchor>
		</Token>
		
	</File>
</Tokens>